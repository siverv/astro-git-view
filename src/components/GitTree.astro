---
import {getTree,getLog,getBlob, commitEntryDate} from '@utils/git';
import {BAD_NAMES, getHistory} from '@utils/staticPaths';
import "./GitTree.css"
import "../style/headered-section.css"
import MarkdownPreview from './filePreviews/MarkdownPreview.astro'
import RelativeDateTime from '@components/ui/RelativeDateTime.astro'
import GitHistoryBar from '@components/GitHistoryBar.astro';
import GitBreadcrumbs from '@components/GitBreadcrumbs.astro';
import GitLogEntry from '@components/GitLogEntry.astro';
const {ref, path, entry: {oid}} = Astro.props;

const log = await getLog(ref);
const object = await getTree(oid);

const history = await getHistory(ref, path || ".");


function joinPath(...path){
  return path.filter(Boolean).join("/")
}
const historyMap = new Map();
for(let subObject of object.tree){
  historyMap.set(subObject.oid, await getHistory(ref, joinPath(path, subObject.path)));
}

const latestCommit = history[0];

const readme = object.tree.find(part => part.path.match(/^readme/i));
const readmeBlob = readme ? await getBlob(readme.oid) : null; 

const orderedTree = [...object.tree].sort((a,b) => a.type == b.type ? a.path.localeCompare(b.path) : a.type === "tree" ? -1 : 1)
---

<article class="tree-browser">
  <GitHistoryBar {...Astro.props}/>
  <section class="headered-section">
    <header class="headered-section-header">
      <GitBreadcrumbs ref={ref} path={path}/>
    </header>
    <table class="tree-table">
      <tbody>
        {orderedTree.map(part => {
          const latestCommit = historyMap.get(part.oid)[0];
          let segment = BAD_NAMES.includes(part.path) ? part.oid : part.path;
          const href = "/tree/"+ref+"/"+(path ? path + "/" : "")+segment;
          return <tr class="tree-row">
            <td class="object-type">{part.type === "tree" ? "▦" : "▢"}</td>
            <td class="object-link">
              <a href={href} set:text={part.path}/>
            </td>
            {latestCommit &&
              <td class="object-history">
                <span class="commit-message">{latestCommit.commit.message}</span>
                <RelativeDateTime date={commitEntryDate(latestCommit)}/>
              </td>
            }
          </tr>
        })}
      </tbody>
    </table>
  </section>
  {readme ? <MarkdownPreview {...Astro.props} entry={readme}/>: null}
</article>


