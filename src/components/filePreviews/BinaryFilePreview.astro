---
import {getBlob, getLog} from '@utils/git';
import { Code } from 'astro/components';
import {getRepoMaps} from '@utils/staticPaths'
import GitLogEntry from '@components/GitLogEntry.astro';
import Bytes from '@components/ui/Bytes.astro';
const {ref, path, entry: {oid}} = Astro.props;

const log = await getLog(ref);
const blob = await getBlob(oid);

const {pathMap, refPathMap} = await getRepoMaps();
const history = log
  .map(entry => ({
    ref: entry.oid,
    timestamp: entry.commit.author.timestamp,
    checksum:  refPathMap.get(entry.oid)?.get(path)?.oid,
    entry
  }))
  .filter(a => a.checksum)
  .sort((a,b) => a.timestamp - b.timestamp)
  .filter((a,i,l) => l.findIndex(b => b.checksum === a.checksum) === i)
  .sort((a,b) => b.timestamp - a.timestamp)
  .map(a => a.entry);

const latestCommit = history[0];
const bytes = blob.blob.length;
---
<section class="file-content-section headered-section">
  <header class="headered-section-header">
    {path}
    |
    <Bytes bytes={bytes}/>
    <a href={"/object/" + oid + "/" + path}>raw</a>
  </header>
  <div>
    <i>Binary file.</i>
  </div>
</section>