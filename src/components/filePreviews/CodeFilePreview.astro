---
import {getBlob, getLog} from '@utils/git';
import { Markdown } from 'astro/components';
import {getRepoMaps} from '@utils/staticPaths'
import GitLogEntry from '@components/GitLogEntry.astro';
import Bytes from '@components/ui/Bytes.astro';
const {ref, path, entry: {oid}} = Astro.props;

const log = await getLog(ref);
const blob = await getBlob(oid);
const decoder = new TextDecoder("utf-8");

const {pathMap, refPathMap} = await getRepoMaps();
const history = log
  .map(entry => ({
    ref: entry.oid,
    timestamp: entry.commit.author.timestamp,
    checksum:  refPathMap.get(entry.oid)?.get(path)?.oid,
    entry
  }))
  .filter(a => a.checksum)
  .sort((a,b) => a.timestamp - b.timestamp)
  .filter((a,i,l) => l.findIndex(b => b.checksum === a.checksum) === i)
  .sort((a,b) => b.timestamp - a.timestamp)
  .map(a => a.entry);

const latestCommit = history[0];
const content = decoder.decode(blob.blob);
const lines = content.split(/\n/);
const sloc = lines.filter(line => !line.match(/^\s*$/)).length;
const bytes = blob.blob.length;
---
<section class="file-content-section headered-section">
  <header class="headered-section-header">
    <span>{lines.length} lines</span>
    <span>({sloc} sloc)</span>
    |
    <Bytes bytes={bytes}/>
    <a href={"/object/" + oid + "/" + path}>raw</a>
    <button type="button">
      blame
    </button>
  </header>
  <div>
    <table class="file-content">
      <tbody>
        {lines.map((line, index) => {
          let num = index + 1;
          return <tr class="line">
            <td class="line-number">
              <a href={"#L"+num} id={"L"+num}>
                {num}
              </a>
            </td>
            <td class="line-content">{line}</td>
          </tr>
        })}
      </tbody>
    </table>
  </div>
</section>