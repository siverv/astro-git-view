---
import { Code } from 'astro/components';
import GitBreadcrumbs from '@components/GitBreadcrumbs.astro';
import Bytes from '@components/ui/Bytes.astro';
const {repo, ref, path, entry: {oid}} = Astro.props;

const log = await repo.getLog(ref);
const blob = await repo.getBlob(oid);
const decoder = new TextDecoder("utf-8");

const {pathMap, refPathMap} = await repo.getStaticHelpers();
const history = await repo.getHistory(ref, path);

const latestCommit = history[0];
const content = decoder.decode(blob.blob);
const lines = content.split(/\n/);
const sloc = lines.filter(line => !line.match(/^\s*$/)).length;
const bytes = blob.blob.length;
---
<section class="file-content-section headered-section">
  <header class="headered-section-header">
    <div style="display: inline-block">
      <GitBreadcrumbs {...Astro.props}/>
      <div>
        <span>{lines.length} lines</span>
        <span>({sloc} sloc)</span>
        | 
        <Bytes bytes={bytes}/>
      </div>
    </div>
  </header>
  <div>
    <table class="file-content">
      <tbody>
        {lines.slice(0,1000).map((line, index) => {
          let num = index + 1;
          return <tr class="line">
            <td class="line-number">
              <a href={"#L"+num} id={"L"+num}>
                {num}
              </a>
            </td>
            <td class="line-content">{line}</td>
          </tr>
        })}
        {lines.length > 1000 && <tr class="line">
          <td class="line-number">
            ...{lines.length - 1000}
          </td>
          <td class="line-content"><b>Limited to only the first 1000 lines</b></td>
        </tr>}
      </tbody>
    </table>
  </div>
</section>